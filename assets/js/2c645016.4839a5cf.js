"use strict";(self.webpackChunkuniversal_react_docs=self.webpackChunkuniversal_react_docs||[]).push([[279],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,y=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5769:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={id:"quality-control",title:"Static Quality Control",sidebar_label:"Quality Control"},c="XT Page Source Code Quality Config Package",u={unversionedId:"quality-control",id:"quality-control",title:"Static Quality Control",description:"Package to unify code quality control configuration and rules across projects. No need to install those packages anymore in your projects and maintain them all separately.",source:"@site/docs/quality-control.md",sourceDirName:".",slug:"/quality-control",permalink:"/universal-react-docs/docs/quality-control",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/quality-control.md",tags:[],version:"current",frontMatter:{id:"quality-control",title:"Static Quality Control",sidebar_label:"Quality Control"},sidebar:"someSidebar",previous:{title:"Support",permalink:"/universal-react-docs/docs/support"},next:{title:"Smart Context",permalink:"/universal-react-docs/docs/smart-context"}},s={},p=[{value:"Eslint Package",id:"eslint-package",level:2},{value:"Configure",id:"configure",level:4},{value:"Note:",id:"note",level:4},{value:"Usage",id:"usage",level:3},{value:"Stylint Package",id:"stylint-package",level:2},{value:"Configure",id:"configure-1",level:4},{value:"Note:",id:"note-1",level:4},{value:"Usage",id:"usage-1",level:3}],d={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"xt-page-source-code-quality-config-package"},"XT Page Source Code Quality Config Package"),(0,a.kt)("p",null,"Package to unify code quality control configuration and rules across projects. No need to install those packages anymore in your projects and maintain them all separately."),(0,a.kt)("h2",{id:"eslint-package"},"Eslint Package"),(0,a.kt)("p",null,"To Install package <@xt-pagesource/eslint-config>"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @xt-pagesource/eslint-config-react\n")),(0,a.kt)("h4",{id:"configure"},"Configure"),(0,a.kt)("p",null,"Create the file .eslintrc in your app root folder and extend rules. you can also add additional rules as per your desire."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n "extends":["@xt-pagesource/eslint-config-react"]\n}\n')),(0,a.kt)("h4",{id:"note"},"Note:"),(0,a.kt)("p",null," You can extend or modify this rules in your project as is described on the documentation of eslint, the same way as you will do when extending eslint recommended rules."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n "extends":["@xt-pagesource/eslint-config-react"],\n\n rules:{\n     your rules here\n }\n}\n')),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Like you will do normally with eslint, this package is nothing else just a wrapper. - For just linting and to see the report, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"eslint path/to/folder\n")),(0,a.kt)("p",null,"For linting and autofix the problems, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"eslint --fix path/to/folder\n")),(0,a.kt)("p",null,"Recommended\nAdd in your package.json at the scripts section the two following scripts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n    "scripts": {\n    "lint:js": "eslint path/to/folder",\n    "lint:fix": "eslint  --fix path/to/folder"\n    }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"stylint-package"},"Stylint Package"),(0,a.kt)("p",null,"To Install package <@xt-pagesource/stylelint-config>"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm install @xt-pagesource/stylelint-config-react\n")),(0,a.kt)("h4",{id:"configure-1"},"Configure"),(0,a.kt)("p",null,"Create the file .stylelintrc in your app root folder and extend rules. you can also add additional rules as per your desire."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n "extends":["@xt-pagesource/stylelint-config-react"]\n}\n')),(0,a.kt)("h4",{id:"note-1"},"Note:"),(0,a.kt)("p",null,"You can extend or modify this rules in your project as is described on the documentation of eslint, the same way as you will do when extending eslint recommended rules."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n "extends":["@xt-pagesource/stylelint-config-react"],\n\n rules:{\n     your rules here\n }\n\n}\n')),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("p",null,"Like you will do normally with stylelint, this package is a wrapper. - For just linting and to see the report, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"stylelint path/to/folder\n")),(0,a.kt)("p",null,"For linting and autofix the problems, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"stylelint --fix path/to/folder\n")),(0,a.kt)("p",null,"Recommended\nAdd in your package.json at the scripts section the two following scripts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n    "scripts": {\n\n    "lint:css": "stylelint path/to/folder",\n    }\n}\n')))}f.isMDXComponent=!0}}]);